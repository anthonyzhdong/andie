package cosc202.andie;

import java.awt.image.*;
import java.util.*;
import java.awt.Color;

/**
 * <p>
 * ImageOperation to apply several different Emboss filters.
 * </p>
 * 
 * <p>
 * An Emboss filter creates a border around the image contents in a sketch like way.
 * </p>
 * 
 * <p> 
 * <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>
 * </p>
 * 
 *  Some comments have been generated by chat-gpt
 * 
 * @see java.awt.image.ConvolveOp
 * @author Steven Mills
 * @version 1.0
 */
public class EmbossFilter implements ImageOperation, java.io.Serializable {
    

    private String type;
    private boolean sN = false;

    
    /**
     * Constructs an EmbossFilter object with the specified type and shift negative flag.
     *
     * @param type the type of the emboss filter
     * @param t    the shift negative flag
     */
    EmbossFilter(String type) {
        this.type = type;  
    }

    /**
     * Constructs an EmbossFilter object with the specified type and shift negative flag.
     *
     * @param type the type of the emboss filter
     * @param t    the shift negative flag
     */
    EmbossFilter(String type, boolean t) {
        this.type = type;  
        this.sN = t;
    }

    /**
     * Constructs an EmbossFilter object with the default type ("Center Left").
     * By default, a "Center Left" emboss filter is applied.
     */
    EmbossFilter() {
        this("Center Left");
    }


    /**
     * Apply the emboss filter to the input image.
     *
     * @param input the image to apply the emboss filter to
     * @return the resulting embossed image
     */
    public BufferedImage apply(BufferedImage input) {
        float [] array = { 0 , 0, 0 ,
            0, 0, 0,
             0 , 0, 0 };

        if (type == "Center Left") {
            array[3] = 1;
            array[5] = -1;
        } else if(type == "Top Left") {
            array[0] = 1;
            array[8] = -1;
        } else if(type == "Top Center") {
            array[1] = 1;
            array[7] = -1;
        } else if(type == "Top Right") {
            array[2] = 1;
            array[6] = -1;
        } else if(type == "Center Right") {
            array[5] = 1;
            array[3] = -1;
        } else if(type == "Bottom Right") {
            array[8] = 1;
            array[0] = -1;
        } else if(type == "Bottom Center") {
            array[7] = 1;
            array[1] = -1;
        } else if(type == "Bottom Left") {
            array[6] = 1;
            array[2] = -1;
        } else if(type == "Sobel Horizontal") {
            array[0] = -1/2;
            array[2] = 1/2;
            array[3] = -1;
            array[5] = 1;
            array[6] = -1/2;
            array[8] = 1/2;
        } else if(type == "Sobel Vertical") {
            array[0] = -1/2;
            array[1] = -1;
            array[2] = -1/2;
            array[6] = 1/2;
            array[7] = 1;
            array[8] = 1/2;
        } else {
            array[3] = 1;
            array[5] = -1;
        }

        if (sN == true) {input = shiftNegative.fixNegative(input);}
        
        
        // Make a 3x3 filter from the array
        Kernel kernel = new Kernel(3, 3, array);

        ConvolveOp convOp = new ConvolveOp(kernel, ConvolveOp.EDGE_NO_OP, null);
        BufferedImage output = new BufferedImage(input.getColorModel(), input.copyData(null), input.isAlphaPremultiplied(), null);
        convOp.filter(input, output);

        return output;
    }




}
